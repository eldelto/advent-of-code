package net.eldelto.aof.`2020`.`05`

fun main() {

  // Example
  val exampleSeats = exampleInput.split("\n").map { Seat.parse(it, 127, 7) }
  println("Example result: $exampleSeats")

  // Scenario 1
  val seats = input.split("\n").map { Seat.parse(it, 127, 7) }
  val maxId = seats.maxOf(Seat::id)
  println("Scenario 1 result: $maxId")

  // Scenario 2
  val missingSeats = findMissingSeat(seats)
  println("Scenario 2 result: $missingSeats")
}

fun findMissingSeat(seats: List<Seat>): List<Seat> {
  var diff = 0
  var prevSeat: Seat? = null
  val foundSeats: MutableList<Seat> = mutableListOf()
  for (seat in seats.sortedBy(Seat::id)) {
    prevSeat?.let { diff = seat.id - it.id }
    if (diff == 2) {
      val id = seat.id - 1
      val row = id / 8
      val column = id % 8

      foundSeats.add(Seat(row, column))
    }

    prevSeat = seat
  }

  return foundSeats
}

enum class BinaryPartitionSide {
  LOWER, UPPER
}

typealias BinaryPartition = List<BinaryPartitionSide>

class Seat(val row: Int, val column: Int) {
  val id = row * 8 + column

  companion object {
    val partitionRegex = Regex("([FB]+)([LR]+)")

    fun parse(rawPartitions: String, maxRows: Int, maxColumns: Int): Seat {
      val (rowPartitions, columnPartitions) = parseBinaryPartitions(rawPartitions)

      val row = executeBinaryPartition(rowPartitions, 0, maxRows)
      val column = executeBinaryPartition(columnPartitions, 0, maxColumns)

      return Seat(row, column)
    }

    private fun parseBinaryPartitions(rawPartitions: String): Pair<BinaryPartition, BinaryPartition> {
      val match = partitionRegex.matchEntire(rawPartitions)

      val groupValues = match?.groupValues
      if (groupValues == null || groupValues.size != 3)
        throw IllegalArgumentException("Invalid partition string: $rawPartitions")

      val rowPartitions = parseBinaryPartitions(groupValues[1], 'F', 'B')
      val columnPartition = parseBinaryPartitions(groupValues[2], 'L', 'R')

      return Pair(rowPartitions, columnPartition)
    }

    private fun parseBinaryPartitions(
      rawPartitions: String,
      lowerIdentifier: Char,
      upperIdentifier: Char
    ): BinaryPartition {
      return rawPartitions.map {
        when (it) {
          lowerIdentifier -> BinaryPartitionSide.LOWER
          upperIdentifier -> BinaryPartitionSide.UPPER
          else -> throw IllegalArgumentException("Not a valid row partition: $it")
        }
      }
    }

    private fun executeBinaryPartition(partitions: BinaryPartition, min: Int, max: Int): Int {
      var lowerBound = min
      var upperBound = max
      for (p in partitions) {
        val total = upperBound - lowerBound
        val middle = total shr 1

        when (p) {
          BinaryPartitionSide.LOWER -> upperBound -= (middle + 1)
          BinaryPartitionSide.UPPER -> lowerBound += (middle + 1)
        }

        if (upperBound == lowerBound)
          return upperBound
      }
      throw IllegalArgumentException("Range can't be partitioned exactly with the given input: lowerBound: $lowerBound, upperBound: $upperBound")
    }
  }

  override fun toString(): String {
    return "Seat(row=$row, column=$column, id=$id)"
  }
}

val exampleInput = """
  BFFFBBFRRR
  FFFBBBFRRR
  BBFFBBFRLL
""".trimIndent()

val input = """
  FBBBFFFLRL
  BFFBBBBLRL
  FBFFFBBRRR
  FBFBBFFLRL
  FFFBFBBRLR
  FBFBBBFRLL
  BFBFFBFRLR
  BFBFFFBRRL
  BFBBFFBRLR
  FBBFBBBRLL
  FFFBBFFRRR
  FFBBBFBRLR
  BBFFBFBLLL
  BBFFBBFRRR
  BBFBFFBLLR
  FFFBBBFLRR
  BBFBBFFRLR
  BBFFFBFRLL
  FBFFBFBLLR
  FBBFFFBRLR
  BFFFFBFLRR
  BBFFBBBLRL
  FBFBBFFRRL
  BBFFFFFLRR
  BFBBBFBRRL
  BBFFBBBRLR
  FFBFBFBRLL
  BFBFFBFLLR
  FBBFBBFRLR
  BBFFFBBRLR
  BBFFBBFLLR
  FFBBBBBRRL
  BFFFBFBRRL
  FFBFFFBRRL
  FBBBBFBLLL
  FBBFFBFLRR
  BBFFFFBRRL
  FFBFBFBLRR
  FFBBFBBLLR
  BFBFBBFRLL
  BBFFFBFLLL
  FBBBBFFRRR
  BBFBFFFRLL
  FFFBBFBRRR
  FFBBFFFLRR
  BFBBBFFRRR
  BFFFFBFRLL
  BFFFFBBRLR
  FBFBBFBRRL
  BFFBFFFLLL
  FBFFBFBRLR
  BFFFBBFRLR
  BFBFBBBRLR
  BFFBBBFLLR
  BFBBBBFRRL
  BFFFFFBLLL
  BBFFFFFLRL
  FBFFBBBRRL
  FBBBFFFLLL
  FBFBFBFRLL
  BBFBFBBLRR
  BBFBFBFLRR
  FBFFBBFRRR
  FBBBFBBLRR
  FBFFBFFRLR
  BFBBFFFLRL
  FFBFFBFRLR
  FBFBFFBRLL
  BFFBBFFLLL
  FBBFBFBLLR
  FFBBFFBLLR
  BFFBBFFRRR
  FFFBBBFLLR
  FFBBBBBLLR
  FFBFFBBLLR
  FFBFFFBRLR
  BFBFBFFLLL
  BBFFFFBRRR
  BFBFFFFRLL
  FBFBFFFRRL
  FBFFFFBLRR
  FFBFFBFLRR
  FBBBBFBRLR
  BFFFBBBLRR
  FFBBBBFRRL
  FFFBFBBRRR
  BFBBBBBRRL
  FFFBBBFLRL
  BFFBBBBRLR
  FBFBFFFLRL
  FBBFFBFLRL
  FBFBFFBRRL
  FFBBBBBRRR
  BFFBFBFLLR
  FFBFBBBLLR
  BBFBFBFRRR
  FFBBFFFRRL
  BFBBBBFRRR
  BFBBBFBRRR
  FBFBBFBLRL
  BFBBBFBLLR
  FBBBFFBRRL
  FBBFBFFRRL
  FBFBBBFLRL
  FBFFFFFRRL
  FBFFFFFRLL
  FBBBFBFLLL
  FFFBFBBRLL
  FFBBFBFRLR
  FBBFBFFLLL
  FFBBBFFLRL
  BFFBBFBLLR
  BFBFBBFRRR
  FFBBBBFRLL
  BBFBBBFRRL
  FBBBFFBLLR
  FBFBFFBLLL
  FBFBFFFRRR
  FFBFBFFLLR
  BBFBFFFLLL
  FBFFFBFLRR
  FBFFFFBRRL
  FBBFBBBLRR
  FBBFBBFRRL
  BFBBFFBLRL
  FBBFBBBLLL
  BBFBFFFRRR
  FFBFBBFRLR
  FBBFFFFRRR
  BFBFBFBRLR
  FBFBBBFLLR
  BFBBBBBRRR
  BBFFFFFLLR
  BFFFFFFLRL
  FBBBFFFLRR
  BFFBFBBLLL
  FBFBFFFRLR
  BBFBBBFLLL
  FFFBBBFRRL
  BFFBFBFLRL
  BFBBFBBLLL
  BBFFFBFRRL
  BFFBBFFLRR
  BBFBBFFLLR
  BFBBFBFRLL
  FBBFFBFLLL
  FBBFFFBLLR
  FFFBBBBLLL
  FFFBBFFRRL
  FBFFFBBLRR
  BBFBFBBRLL
  BBFBBFFLRR
  BFFBFBBRRL
  FBBFFFFLRR
  FBBFFBBLRR
  BFFFBFBLLR
  BFFBFBBRLR
  FBFBBFBRRR
  FBBFFBBRLR
  BFBFFBFRLL
  FBFBBBFLLL
  FFBFFFFRRL
  FBFBFBFLRR
  BFBFBBFRLR
  FBBBBBFLLR
  FBFFFFBRLL
  BFFFBBBRLL
  FBBBBBBRLR
  FFBBFFBLLL
  FBFBBBBRRL
  BFFBBFBRRL
  BFFFBBBLLL
  FBFFBBBLRR
  FBFBFFFLLR
  FBBFFFFLLR
  FBFBBBBLLL
  FBBFBFBRRR
  BFBFBFFRRL
  FBFFFFFLLR
  FBFFBBFLRR
  BBFBFBBLRL
  FBFFFFFLRL
  BFBFBFBLRR
  BFBFFBFLRR
  FFBFFBBRLL
  BFFBBFBRLL
  FBBFFBBLLL
  FBFFFFBLLR
  BFBFFFFLRR
  FBFFBFBRLL
  FFBFBFFLRR
  BFFFFBBLLL
  FFFBBBBRLL
  BFBBBBFLRR
  FBFFBBBRLL
  FBFFFBBRRL
  BFFBBFFLLR
  BFBFFBBLRR
  BFBFFFBLLL
  BFFFFFBRRL
  BBFBFBBRRR
  BBFBBFBLRL
  FBBFBFBLRR
  BFFFFBBRRL
  BFBBFBBRLL
  FFBBFBBRLL
  FBFBBFFRLR
  FFBBBFFLLR
  FBFFFFBRLR
  BBFBBFBLRR
  BFFBFBBLLR
  FBBFFFBLRL
  BFFBBBBRLL
  FBBFBBFLLR
  BFBBFBBRRR
  BBFFBFBRLR
  FFBFFFFLLL
  BFBFBBBLRR
  FBBFBBBLLR
  FBBFBBBRRL
  BFFFBBBRLR
  BBFFBBBLLL
  FFBFBFFRRR
  FBFFBFBLRL
  FBBFFBFLLR
  FFBFFFBRRR
  BFFFBFBRLR
  FBFFFBBLLL
  BBFFFBFLRL
  FFBBBFBLRL
  BFFFBFBRLL
  FFBFFBBLLL
  BFFFBBFLLL
  BFBFFBBRLR
  BFBBBBFRLL
  BFBBFFFLLL
  BBFFFBBRRL
  FBFBFBFRRL
  BBFBFFBLRL
  BFBFFFFLLL
  FBBBFFBRLR
  FFBBFBBLLL
  FFBBBBFRRR
  FFFBBBBLRL
  FFBFBFFRLR
  FFFBBFBLLR
  BBFFBBBRLL
  FBFFFBFRLL
  FFBFBFBLLL
  FBFBFBBLRL
  FFFBBBFLLL
  BFFFBBFLRL
  FFBBBFFRLL
  FBFBBBBRLR
  FBBFBFBRLR
  BFFFFFFRRR
  FBFBFFFLRR
  BBFFFBFLLR
  FBBBBBBLRL
  FBFBFFBRRR
  FBBBBFFRRL
  BFFBFBFRLR
  BBFFBFBRRL
  BBFFBFFLLR
  FBBBFBBLLR
  FBFBFFBLRL
  BFBBBBFLLL
  FBBBFBBRLL
  FFBBFBFRLL
  FFFBBFBRLR
  BBFBBBFLLR
  BBFBFFBRLR
  BBFFBFFLRR
  FBFFBFBRRL
  FFBFFBFRLL
  FFFBBFBLRL
  FBBFFFFRLR
  BFFFBBFRLL
  FBBFBBFLLL
  BFBFBFBRRL
  BFFFFFBRLR
  BBFBBFFRRL
  BFFBBFFRLR
  BFFBFFFRRR
  FFBBFFBLRR
  FBBBBBFRRR
  BBFBFBFRRL
  FFBFBBBLRR
  BFBFBFBRLL
  FFBBBBFLRR
  BFFFBFFLLL
  FBBBBFBRRR
  BBFBFBBLLL
  BFBFBBFRRL
  FBBFBBFLRR
  BFFFFFBLRR
  BFFFBFFLRL
  BFFBBBBLLR
  FBBFFFBRLL
  BFBBBBFLRL
  BFFBBBBLLL
  BFFFFFFRLL
  FBBBBBBRRR
  FFBFFFFLRL
  FBFFFBBRLL
  FBFFFFBLRL
  FBBBBBBLRR
  FBFFBBFLLR
  BFBBBFFLRL
  FBFFBBFRRL
  BFBFFBBLLR
  BFBBFBFRLR
  FBBBBFFLRR
  BFBFBBBLLL
  FFFBBBFRLL
  FFBFFFBLRL
  BFFBBBFLLL
  FFBFBBFLLR
  FBBFBFBLLL
  BBFFBFFRLL
  FBBFFFFRRL
  BFBFFFFLLR
  BBFBBFBLLL
  BBFBFFFLRL
  BFBBBBBLLR
  FFBFBBBLLL
  FFBBBFBRRL
  FFFBBBBRLR
  BFFFBFBLRR
  FBBFBBBRLR
  BFBFFFBLRR
  FBBBFFBLRR
  FFFBBFBRLL
  BFBBFBBRRL
  FFBBBFBRLL
  BBFBFBFLRL
  BBFBBFBRRL
  BFBBBBBRLR
  FFBBFFFLLR
  FFBBBFFRRL
  FFBBFBFLRR
  FBFBFBBRRR
  BFBFBBBLRL
  FBFFBFFLRR
  BFFBFFBLRR
  FFBBFFFLLL
  BFFFBBBLRL
  FFBFBFBRLR
  BFBFBFBRRR
  BFFBBFFLRL
  BBFFBFFLLL
  BBFBBFBRLL
  BBFFFFBLLR
  FBBBBBBLLR
  FFFBBBBRRL
  FBBBBFFLLL
  BBFBBFBLLR
  BFBBBFFRRL
  BFBBBFBLRR
  BBFFFFFRLL
  FFBBFBFLRL
  BFBFFFBRLL
  FFBFFBBLRL
  FBBBBBBLLL
  FBBBFBBRLR
  BBFFBBFRRL
  BFBFFFBRLR
  BFBFFBFRRR
  BBFFFBFRRR
  BBFBFFFRLR
  FFBBBFFLRR
  FFBBFFFRLR
  BFFFBFBRRR
  BFBBFFBRLL
  FBBBBFBLLR
  FFBFFBBRRL
  FBFFBFFLLR
  FBFBFBFRLR
  FBFFBFFLRL
  FBFBFBBRLL
  FBFBBBFRRL
  FBBBBFBLRR
  FBFFFFFLRR
  FFBBFFBLRL
  BFFFFBFRRL
  FBBFBFFLRL
  FFBFFFBLLL
  FFBFBBFLRL
  FFBBBFFLLL
  BFBBFFBLLR
  FFFBBFFLRR
  FBBBBBFRLR
  FBBFFFFLLL
  BBFBFFBRRL
  FBFFBFFRRL
  FFBBFFBRLL
  BBFFFBBLRL
  FFFBBFFRLL
  FFFBBFBLLL
  BFFFFBBLLR
  FBFBBBBRRR
  BFBBFBBRLR
  FFBFFFFLLR
  FBBFBFFLRR
  FFBBFFFRRR
  BFBFBFFLRL
  BBFBFBFRLL
  FBBBBFFLLR
  FBBBBFFRLL
  BFFBFFFLRL
  FFFBFBBLRL
  FBFFBFFRLL
  FBBFBBBLRL
  BFBBFFBLRR
  FBBFFFBLRR
  BFFFBFFLRR
  FBBFBFFRLL
  FBFFBFFRRR
  BBFFBFFRRR
  BBFFBBBRRL
  BFBBFBFRRR
  FFBFFBFRRR
  FBBBFBBLLL
  FFBBFFBRRL
  FBBBFFBRLL
  FBBBFFFRRL
  FBBBBBFRRL
  FBBBFBBLRL
  FFBBBBFLLR
  FBFFBBBLLL
  BFFBBBBRRL
  FBBFBFBRLL
  FBFFBFBRRR
  BFBBBBFRLR
  FBFFBBFLRL
  FFBBFBBRRR
  FBBFFBBRRR
  BBFFFFFLLL
  BFFBFBFLLL
  BFFFFFFLLR
  BFBBFBFRRL
  BBFBBFBRLR
  FBFBBBBLLR
  FBFBBFFLRR
  FFBFBFBRRR
  BFBBBBBLLL
  FBBFFFFRLL
  FFBFBBFRRR
  BFBFBFBLLR
  FFBFFFBLLR
  FBBBFFFRRR
  FBFBBFFLLL
  FBBBFBFRRL
  BFBFFFFRRR
  FFBBBBFLLL
  BFBFBBBRRR
  BFBBFFFRRL
  BFBBBBBRLL
  BFFFFBBLRL
  FFBBFBFRRL
  BFFFBFFRRL
  FFFBBBBLRR
  BFBBFFFLLR
  BFFFBBFLLR
  BFBBFFBRRR
  FBFBBFBLLR
  FBBBFBFLLR
  FBFBFBBLLR
  BFBFFFFRRL
  BBFFBFFLRL
  BBFFFFFRLR
  FFBFBFFRRL
  FFBFBFBRRL
  FFBFBBFRLL
  FBFFBBBLLR
  FBBFFFBRRR
  FBBBBBFLRR
  FBFBBFBLRR
  BFBBFFFLRR
  FBFFBFBLRR
  FFFBBBFRLR
  BFFFFFFLRR
  BFFFFBFLLR
  BFFFFBFLRL
  BFBFBBFLLL
  FBBBBBFRLL
  BFBBBFFRLL
  BFFBFFBRRR
  FBBFFFBRRL
  FBBBBBBRRL
  BFFBBBBRRR
  FBBBBFFRLR
  BFFBFFFRLR
  FBBBFFBRRR
  BFFBFBFRRL
  BFBFBBFLLR
  BFBFFBBLLL
  FBBBFFFRLR
  FFBBBFFRLR
  FFBFBBBRLR
  BBFFBBBRRR
  FBFFBBFRLR
  BBFFBBBLRR
  FFBBBBBLRL
  BFFFBFFLLR
  FBFFFBBRLR
  BFFFFBBRRR
  BFBFBBFLRL
  BBFFFFBLLL
  BBFFFBBRRR
  BFBBFFBRRL
  BFBFFBFRRL
  FBFBBFFRLL
  BFFBBBFRLR
  BBFBBBFRLR
  FBBFBBFLRL
  FBBBFFFRLL
  BFFBBFFRLL
  BFBBBBFLLR
  BFFBBFFRRL
  FFBFFFFLRR
  BBFBBBFRLL
  BBFBFBFRLR
  BBFFBBBLLR
  FBFBBFFLLR
  BFFBBBFRLL
  FFBBFFBRLR
  FFBBFBBLRL
  BFFFBBFRRR
  BBFBBFFRLL
  BFFBBFBLRR
  FBFFBBBRRR
  BFFFBFFRLL
  FFFBBBBRRR
  BFBBFBFLRR
  FFBBBBFLRL
  FBFFFBFRRR
  BFBFBFFLLR
  BFBFBBBLLR
  FFBFFBFLLL
  FFBFFBFRRL
  BFFBFFBLRL
  BFBBFFFRLL
  FBBFFBFRLR
  BFFBBFBLLL
  FFFBBBFRRR
  FBFBFBFRRR
  BFBFBBBRRL
  FFBBFBBRLR
  BFFBFFFLLR
  BFBFBFFRRR
  FBFFFFBRRR
  BFBFFBBLRL
  BFBBFBBLRR
  BFFBFBFRLL
  BFBFBFFRLL
  FFBBFBFLLL
  FBBFFBBRLL
  BBFFBBFRLL
  BBFFFFFRRL
  FFFBBFFLLL
  FBBBFBFRRR
  BFBFFBFLLL
  BBFBFFFLRR
  FBBFBFBRRL
  FFBFBFFRLL
  FFBFFFBLRR
  FFBBFBBLRR
  FFBBFBFLLR
  FBFFFBBLRL
  FBFBFBFLLR
  BBFFFBBLLR
  FBFFFBFLLR
  FBBBFBFLRR
  BBFBBBBLLL
  FBFBFFFLLL
  FFBBBFBRRR
  FFBBFFFRLL
  BBFBBFFLRL
  FBFBBFBRLR
  BFFFBBFLRR
  BFBFFBBRLL
  BFFFBBFRRL
  FFBBBFBLLL
  FBFBBBFRLR
  FBBBFFBLRL
  BFBFFFFLRL
  FFBFFBBLRR
  FBFBBBBLRL
  BBFBFBBLLR
  FFBBFFFLRL
  FBFFFFFRRR
  FBBBBFFLRL
  FFBBBFBLLR
  BFBFFBBRRL
  FBFFFBFLLL
  FFFBBFBRRL
  BBFBFBBRLR
  BBFBBFBRRR
  BBFBBBFLRR
  BFFBFFBLLL
  FFBFBBBRLL
  BBFBFFFLLR
  BBFFBBFRLR
  FFBBFBFRRR
  BFBBFBBLRL
  BBFBFBFLLL
  BFBFFBFLRL
  BFBBBFBLLL
  FFBFFBFLLR
  BFFBBBFRRR
  BFFFFBFLLL
  BFBFBFBLRL
  FBFBFBBRLR
  FBFFFFFRLR
  FFBBBBBLRR
  BBFFFBBLRR
  BBFBBBFLRL
  FBFFBBBRLR
  FFBBBBBLLL
  FFBFBBBRRR
  FFBBBBBRLR
  BFFFFBBRLL
  BFBBBBBLRL
  FBBFBBFRLL
  FBBBBBBRLL
  BBFFBFFRLR
  BBFFBFBLRL
  BFFBFBBLRL
  BBFFFFBLRR
  FBBFBFBLRL
  FFBFBBBRRL
  BBFFFBBRLL
  BFBFFFFRLR
  BFBFBBFLRR
  BBFFFBBLLL
  FBBBBFBRRL
  FFBBBFFRRR
  FBBBFBBRRL
  FBBFBFFRRR
  FFBFFBBRLR
  BFBBBFFLLL
  FFBFFBFLRL
  BFFBBBFLRR
  BFBFFFBRRR
  FBBFBBFRRR
  BFFFBFFRRR
  BBFBFFFRRL
  BFFBFFBRLL
  FFFBBFFRLR
  FBFFBBFLLL
  FBFFFBFRRL
  FBBFBBBRRR
  FFBFBFFLRL
  BBFBFFBLLL
  FBBFFBBRRL
  BBFBFFBLRR
  FBFBBFBLLL
  FBFBFFBRLR
  BFFFBFFRLR
  BFBFBFFRLR
  FFBBBBFRLR
  FBBFFBFRRL
  FFBFFFFRLR
  BFBFFFBLLR
  FFBFFFFRRR
  FBBBFFFLLR
  BFFBFFFRLL
  FBBFFBBLRL
  BFFBFBFRRR
  BFFBFBBRLL
  BFBBFBBLLR
  BBFBFBBRRL
  FBFBFFBLLR
  FBFFFBFRLR
  FFBFBBFLLL
  FBBBFBFLRL
  FBFFBBFRLL
  BFFFBBBLLR
  BFFBBFBLRL
  FBFBFBBLLL
  BBFFFFFRRR
  FBFBBBFRRR
  FBFBFFFRLL
  FFBFBFBLRL
  FBFBFBFLRL
  BFFFFFFLLL
  FFBBFFBRRR
  FBBBBFBRLL
  FFFBBFFLRL
  BFFBBFBRRR
  FBFBBFFRRR
  BFBBFBFLLL
  BFFFBBBRRR
  FFBFBFBLLR
  BFFBFBFLRR
  BFBBBFFRLR
  BFFFFFBRRR
  BFFFFFBLLR
  BFFBFFFLRR
  BBFFFFBRLL
  FBBFFBFRRR
  BBFFBFBLLR
  BBFFFFBRLR
  BBFFFBFLRR
  BFBBFBFLLR
  BBFFBFBRLL
  FBBBFBBRRR
  FBFBFBBRRL
  FFBFBBBLRL
  BFFFBFBLLL
  FBBFFBBLLR
  FBBBFBFRLR
  FBBBFBFRLL
  BFBFBBBRLL
  BBFBBFFRRR
  FBFBBBBRLL
  BFBBBBBLRR
  BFFBFFBRRL
  BBFFBBFLRL
  BFFBBFBRLR
  FFBFFFBRLL
  FFFBFBBRRL
  BFBFFFBLRL
  BFFBFBBRRR
  FBBFFFFLRL
  BBFBFBFLLR
  BFFBFFBLLR
  BFFBBBBLRR
  BFBBBFFLRR
  FBBBBFBLRL
  FBBBBBFLLL
  FFBFFFFRLL
  FFBBBBBRLL
  BFFFFFBRLL
  BFFFBBBRRL
  BBFFFBFRLR
  BFBBFBFLRL
  BFFFBFBLRL
  FBBFBFFRLR
  BBFBFFBRLL
  BBFFBFBRRR
  BFBBBFBRLR
  BFFBFFFRRL
  BFBBBFBLRL
  BFBBFFFRRR
  FBFFFBFLRL
  FFBFBBFRRL
  BFFFFFFRLR
  BFFBFBBLRR
  FFFBBFBLRR
  BFBBBFBRLL
  FBFFFFFLLL
  BFFBBBFLRL
  FBFBFFBLRR
  FBFFBBBLRL
  FBFBBFBRLL
  FFBFBBFLRR
  BFBBFFBLLL
  BBFBBBFRRR
  FBFBBBBLRR
  BFBFBFFLRR
  FBBFFBFRLL
  FBFBBBFLRR
  FFFBFBBLLR
  BBFBFFBRRR
  FBFFBFFLLL
  BBFFBFFRRL
  FFBFBFFLLL
  BFFBBBFRRL
  FBBFBFFLLR
  BFBBFFFRLR
  BFBFBFBLLL
  BFFBFFBRLR
  FBBBBBFLRL
  BFBBBFFLLR
  FFFBFBBLRR
  BBFBBFFLLL
  FBBBFFBLLL
  BBFFFFBLRL
  FFBBFBBRRL
  FFFBBBBLLR
  FBFBFBFLLL
  FBFBFBBLRR
  BFFFFFFRRL
  FFBFFBBRRR
  FFFBBFFLLR
  BFFFFBFRLR
  FBFFBFBLLL
  BFFFFBBLRR
  BFBFFBBRRR
  BBFFBBFLLL
  FBBFFFBLLL
  FBFFFFBLLL
  FBFFFBBLLR
  BBFFBBFLRR
  FFBBBFBLRR
  BFFFFBFRRR
  BBFFBFBLRR
""".trimIndent()
