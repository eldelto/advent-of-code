package main

import (
	"fmt"
	"strconv"
	"strings"
)

func main() {

	// Example
	exampleExp := parseInput("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2")
	fmt.Printf("Example result: %d\n", exampleExp.Evaluate())

	// Scenario 1
	result := calculateResult(input)
	fmt.Printf("Scenario 1 result: %d\n", result)

	// Example 2
	exampleExp2 := parseInput(rewriteInput("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2"))
	fmt.Printf("Example 2 result: %d\n", exampleExp2.Evaluate())

	// Scenario 2
	result2 := calculateResult(rewriteInput(input))
	fmt.Printf("Scenario 2 result: %d\n", result2)
}

func rewriteInput(input string) string {
	for i := 0; i < len(input); i++ {
		r := input[i]
		switch r {
		case '+':
			input = insertLeftParens(input, i)
			i += 2
			input = insertRightParens(input, i)
		}
	}

	return input
}

func insertLeftParens(input string, index int) string {
	parensCount := 0
	for i := index; i >= 0; i-- {
		r := input[i]
		switch r {
		case ')':
			parensCount++
		case '(':
			parensCount--
			if parensCount == 0 {
				return input[:i] + "( " + input[i:]
			}
		case '+', '*', ' ':
			continue
		default:
			if parensCount == 0 {
				return input[:i] + "( " + input[i:]
			}
		}
	}

	return input
}

func insertRightParens(input string, index int) string {
	parensCount := 0
	for i := index; i < len(input); i++ {
		r := input[i]
		switch r {
		case ')':
			parensCount--
			if parensCount == 0 {
				return input[:i+1] + " )" + input[i+1:]
			}
		case '(':
			parensCount++
		case '+', '*', ' ':
			continue
		default:
			if parensCount == 0 {
				return input[:i+1] + " )" + input[i+1:]
			}
		}
	}

	return input
}

func calculateResult(input string) int {
	sum := 0
	for _, row := range strings.Split(input, "\n") {
		sum += parseInput(row).Evaluate()
	}

	return sum
}

func parseInput(input string) Expression {
	exp, _ := parseExpression(input, 0)
	return exp
}

func parseExpression(input string, index int) (Expression, int) {
	lastExp := &Term{
		left:   &Value{0},
		opType: Add,
	}
	for i := index; i < len(input); i++ {
		r := input[i]
		switch r {
		case ' ':
			continue
		case '+':
			term := Term{
				left:   lastExp,
				opType: Add,
			}
			lastExp = &term
		case '*':
			term := Term{
				left:   lastExp,
				opType: Multiply,
			}
			lastExp = &term
		case '(':
			exp, end := parseExpression(input, i+1)
			lastExp.right = exp
			i = end
		case ')':
			return lastExp, i
		default:
			val, err := strconv.Atoi(string(r))
			if err != nil {
				panic(fmt.Errorf("not a valid number: %c", r))
			}
			lastExp.right = &Value{val}
		}
	}

	return lastExp, 0
}

type Expression interface {
	Evaluate() int
}

type Value struct {
	value int
}

func (v *Value) Evaluate() int {
	return v.value
}

type OperationType int

const (
	Add = OperationType(iota)
	Multiply
)

type Term struct {
	left   Expression
	right  Expression
	opType OperationType
}

func (t *Term) Evaluate() int {
	left := t.left.Evaluate()
	right := t.right.Evaluate()

	switch t.opType {
	case Add:
		return left + right
	case Multiply:
		return left * right
	}

	panic(fmt.Errorf("unsupported operation: %T", t.opType))
}

const input = `6 * (2 + 4 * (3 + 7 * 8 + 4) * 8 + 3 + (9 + 8 + 4 + 9)) * 8 + ((2 * 5 * 9 + 7 + 4 * 3) + (8 + 3 + 7) + (7 + 2) * 8 * 8 + 9)
6 * ((9 * 8 * 6) * 2 + (8 + 2 + 3) + 7 * (9 * 5) * 2)
(7 + 4 * 9 + 2) + 2 * 9 + (4 + 9) * 4
(6 + 7 * 6 + 2 * 6 + 7) + 4
((6 * 7 + 5 * 3 + 4) * 2 + 9 * (2 * 3) * 6 * 6) * 4
(8 * 6 * 5 + 4 * 7) + 8 + (7 + 2 + (3 * 3 + 8 + 9 * 5) * 2 * 3) + (6 + 8 * 5) * 6
(7 * 2 + 4 * (8 * 9 + 7 + 8 * 7)) * 4
(5 + 6) * (9 + 7 + 3 * 9) + 8
5 + 9 + 7 * ((5 * 4 * 8 + 8 + 4 * 6) * (5 + 7) + 6 + 3 * (3 + 2)) + 6
7 * 2 + 4 + 3 * 4 * 5
6 * 5 * (6 * 9 * 9 + 3 + 6 * 6)
9 + 6 + (6 + 7 * 5 * 7 + 4 + 9) * (7 + (2 * 9 + 8 + 4 + 3 * 7) + 6 * 4 * (3 + 8 * 5 * 7) * 6) + ((3 * 4 * 4 + 3) + (4 + 7 + 6 + 6 + 5 + 2) + 6) * 8
7 + (7 + (2 + 6 * 3 * 3 * 8) + 5) + 9 + 8 * (7 * 7 * 3) + 5
9 + (5 + 8 * 3 + 7) * 3
9 + (6 + 6 + 9) * 9 + 3 * (7 + 9 + (6 * 5 * 2) * (3 + 4 * 8 + 6) * 3 * 9) + (9 * (3 * 2 + 6) + 7 * 8 + 6 + 4)
6 + 7 + (3 * (8 * 2 * 3 * 9 * 5) * 6 * (6 + 5 + 6 * 5) * 3 * 4) + 8 + 2 * 3
(7 + (9 * 5 * 6 + 7 * 4) + (5 * 4) * 3 * 3) * 8 + (2 * 3 * 2 * (9 * 6 + 5 + 2 + 6 * 7) + 8) + 4 * (5 + 3 * (2 + 6 * 2 + 2))
(8 * 8 * (8 * 5 + 8 + 5 + 7) * 9 + 8 + 2) + 4
(4 * 5 * 7 + 2) * 5 * 9
(4 * 7 * 8) * 4 + 9 + 5 + (3 * 8 + 3 + 2 * 9)
4 * 7 + (6 + 2 * 5 * 4) * 2
(5 + 6 + 8 * (5 * 2 * 7 * 2) + 2) + 3
2 + (5 * 8 + 6) + (4 + 7 + 9 + 5 + 5 + 9) * ((7 * 8 * 9 * 8) + 6 * 2 * 2 + 6) + 3
7 * 3
(3 + 7 + (5 * 2 + 6 * 9) + 3) * (3 + 8 * 2 + 5)
3 * 5 * 6 + 8 + (4 * (4 * 3 * 8 * 3 * 6 * 3) + 3)
(8 * (5 + 9 + 8 * 2 + 9 + 5) * 6) + 8 * 5 + 5 * 5
7 * 8 * (3 * 6 + (3 * 9 + 2 + 8 + 7 * 7) * 6 + 9 * (5 * 3 + 4 + 2 + 3))
3 * 5 + 9 * 6 + (5 * 4 + 3 * 9 * (2 * 9 + 8 * 3 + 7 + 2)) * 5
(5 + 2) * 7 * ((5 * 3 + 2 * 5 + 6) * 4 * 8 + 2) + 7 * (3 + 6)
(7 * 5) + 5 * 6 + 5 + 5 * 9
4 * (5 + 5 + 9 + (7 + 9) * 5) * 6 + (2 + 3 * 3) * 5 + 8
(2 + 9) + 6 * 3 * 5 + 6
5 + ((9 + 9) * 7) * 2
9 + 2 + 2 + (6 * 4 + 7)
3 * (8 * 4 * 4 * 5) + 6 + 6 * 5
(8 * 9 * 3) + 6 * (3 * 8) * 9 * 3
8 + 5 * 7 + 5
4 + 2 * 2 * ((9 + 3 + 3 + 2) + 7 + (6 * 2 * 4 + 7) * 4) * (4 * (9 * 8 + 5) + 6) + 9
3 * (5 + 9) + 8 * 3 + 7 * (9 + 7 * 3)
4 * 3 * 6 * ((8 * 4 * 9 * 4 * 3 + 3) * 8 * 7 + 3 + 6) * (3 + 2) + 9
((5 * 8 + 2) + 7 + 3 * 4) * 4
8 * (3 * 4 + (6 * 8 + 6 * 2 + 8) + 8)
(8 + (8 * 9 * 4 * 3 * 9 * 8) + 8 + 6 * (3 * 5 + 7 * 8) * 6) * 3 * ((3 + 2 + 4 * 4) * 5 + (4 + 3 * 6) * 2 * (8 + 8 + 8 + 8))
8 + 4 + 3 + 6 + 9 * (2 + 6 + 4)
6 * (4 * 7 * 5 * (9 * 5 * 6 * 6) + 9) * 2
(5 + 7 + 4 + (6 + 7) + 7) * 2 + 9 + 9 * 9 * 9
3 + 8 * 4 + 6 + (7 * 9 * 2 * 6 + (5 * 6 + 5 + 7) + (9 + 8 * 6 * 7 * 3 * 3)) * 7
(2 + 2 * (8 * 2 + 8)) * 6 * 9 + (5 + 7) * (4 * 4 + 9 * 4 * 5) + 4
(8 + 5 + 2 * 5 * 9 * 3) * 9 * (8 * 8 + 9) * 2 * 6
4 + ((5 + 6 + 9 + 7 * 3 + 9) + (6 * 3 + 9 + 4) * 9) * (6 * 8 * 2) + 4
4 + 6 + (9 + 5 + 7 + 4 + 8 + 2) + (2 + (5 + 8 * 9 + 9) * 7 + 5) + 7 * 6
6 * (8 * 5 + 8 + (5 + 8) + 7 * 5)
6 + 5 + (7 + 5 + 7 + 7) * 5 * (8 * 7 + 3 + 2) * 7
(8 * 6 + (6 + 8 * 8) * (2 * 7 + 4 + 3) * 8) * 9 + 8 + 2 * 6 * 9
2 + ((2 + 8 * 3) * 8 * (7 + 4)) + 9 + 6 + 7 + 5
7 + 2 * (8 * 7 + 3 + 6 * 6) * 3 * 9 * (5 * 2 + 2 * 2 + 2 * (6 + 2 * 7))
4 + 2 * 5 + 5 + ((3 + 3 * 8 * 3) * 6 * (7 + 4) + 7 * (9 * 2 + 6 * 8 * 3) * 7)
((9 + 8) * 9 * 5 * 7 * 7) * 6 * 3 + 8 * (6 + 3 * 5 * 9) * 5
4 + 2 * (3 + 9 + (5 * 5 * 2 + 6 + 6 * 9) * (3 + 2) + 9) * 7 * 4 + 6
4 + 9 * 5 + (7 + 9 + (2 + 6 + 8 * 7 * 2 + 2) + 4 + 8) + (6 * 8 * 7 * 7 + 3) * 5
6 * 8
8 * ((2 * 5 + 8 * 8 * 4) + (3 * 7 + 8 + 7 + 5 * 9)) * 8
(5 * 6 * 5 * 3 + 9 * 3) + 4 * (7 * 9)
7 * 2 + 6 * 7 * (8 + 8 * (7 + 2 + 8) + 8 + 9 * 8)
5 * ((8 + 5 + 2 * 5 + 5) + (9 + 5 + 3) * 2 * 2)
(6 + (6 * 2 + 3) + (9 * 6 * 6 + 4 * 2 * 9) * 6 * 6) + 9 + (2 * (2 + 2 * 6) + 2) * 8 + 9 + 4
(4 + (5 + 2 + 6)) * ((8 + 6 + 9 * 2 + 7) + 2 + 5) + 9 * 7 * 7 + 8
3 + 5 + (8 * 9 * 2 + 9 * (9 * 8))
2 + (7 * 3 * (4 + 3 + 6 * 6)) * 5 * (3 + 2 + 6 + (4 + 5 * 8 * 2 + 6))
6 * 7 + 6 + (2 + 3 * 8 * 7 + (5 * 2 + 3 * 9 * 9 + 5) * 7)
7 + 7 * (7 + 5 * 8 * 3 * 5 + 5) * (7 + 7 + 2 + 5) * (4 + 9 * (3 * 5 + 6) * 6) + 4
8 + 9 * 9
9 + 4 * (5 * 9 * 7 * 8)
(3 * 9) * (4 * (2 + 9) + 4) * 9 * (4 + 6)
3 * ((9 + 4) * (6 * 3 * 5 * 8 + 9) + 6) * 9 + 7 * 5 * 5
8 * 7 + 4 + 4 * (4 + 6 + 9)
(6 + 6 * 7 + 7) * 8 + (2 * 6 + 9 * 4 * 8 * 9)
4 * 8 * ((9 * 6 + 9 * 4) * 6 + (6 + 4 * 4)) * 2 * 2 * 4
((2 + 7 + 2 * 4) + 5 * 6 * 9) + 8
2 + 7 * 7 * (7 * 5 * (7 * 5 + 6 + 4 * 5) * (2 + 5 * 8 * 2))
5 * 5 * 9 + 7 + (8 * (9 * 3) * 6) + 7
(6 * 7) * 6 + 9 * 4 + 6 * (7 * (5 * 4) + 8 * 9 + 2 + 9)
7 * (3 * 8 + 4 * 9 + 4) + 4 + 6
(5 + 8) * (8 + 7)
(7 * 4) + ((6 * 4 * 6 + 5 + 4 + 9) * 6 + 9 + (3 * 8) + (2 * 4) + 4) * 3 * ((5 * 4 + 7 + 4 + 3 + 7) * 3 + 5 + 2 * 5)
(5 + (8 * 5 * 4 + 7) * 7 + 3 + 2 + 3) + (6 * 7) + 7 * 5 + 8
((9 + 5 * 2 * 3) * (7 * 5 * 8 * 7 + 3 * 8) + (5 + 5 * 5 + 3 * 9 + 5)) * 6
(8 * 9 * 2 + 2) * 5
5 * 7 * (7 * (5 + 2 * 7) * 3 * 2 * 6)
(2 + (7 * 3) + 7 * 5) * 9 * (4 + (6 * 8 * 2 * 4 + 5) + 9 * (4 + 4 + 6 * 7 + 4 * 6)) + 8
9 * 3 + 8 + ((9 * 9 * 6) + 3 * 8 * 7 * 7 + 5)
(4 * 7 + 8 * 8 * 6 + 6) * 3 * 2 + (4 * 8 + 3) * (2 * 7 + 3 * 3 + 4 + 9)
2 * (3 * (5 + 9 + 6 * 5 + 2)) + 7 * 3
(9 * 8 * 5 * 9) + (2 + (4 * 2 * 5) * 6 + 7 + 8) + 2 * 2
5 + (5 + 2 * 9 + 8) * ((7 * 5 + 4 + 2 + 7 + 6) * (5 * 7 * 2 + 8 + 9 * 7) * 9 * 5 * 8) * 3 * 8 * 3
3 * 3 * 6 * 8 + ((2 + 8 + 8 * 3 + 2) + 7 * 8 * 4 + 3 * 2) + 5
(2 * 8) + 5 * 6 + 4
6 + (8 + 2 * 7) * (3 + 7 * (7 + 2 + 5 + 4 * 7))
(8 + 6) * 3 * 8
6 * 2 * 7 * (3 * (3 + 2 + 8 + 9 * 9) * 3 * 6 + (3 * 7) * 9)
(5 * 8) * 8 + (2 + 4 * 6 * 3 * 8 + 9)
6 * (6 * 8) + 8 * 8 + (3 + (3 + 6))
(5 * 2 * 8) * 7 * 9
(5 * 6) * 2 + (9 + 7 * (3 + 5 * 4 * 8 * 2) + 5 + 5) + (9 + (2 + 3 + 3 * 4 * 4) * 8 * 5) * 8
(5 + 3 + (7 + 9 + 7) + 4 + 7 * 7) * 9 + 6 + 7
((8 + 3 * 8 * 4) * (9 + 3 * 7 * 8 + 6)) * 6
4 * 2 + 3 * (9 + 3 * 4 * 2 + 7 * (4 + 3 + 7)) + 3
2 + (9 * 6 + 4 + (3 * 8 + 5 + 4)) * (8 + 9) * (5 + 3 + (7 * 9 + 3) * 6 + 8) * 7 + 5
6 + (7 + 3) + (4 * 7 + 2) + 5
((6 + 5 * 6 * 2 + 9) + 4 * 3 * 9 * 8) + 3 * (7 * 5 * 9 + 3 * 8) + 9 + 6 + 2
(7 * (8 + 3 * 7 + 2)) * 6
6 * 9 * (6 + 8 + 7 + (2 + 8 + 6 * 6 * 7) + (2 + 2 * 9 * 2 * 5 + 4))
(4 * 3 * (3 * 4 * 9 * 7 * 6 * 6) * 5) + 5 * 5 + 3
6 + 8 * (7 + 3 * 8) * 8 * (2 + (4 + 8) * 4 + 7 + 5 * 6) + (5 * (4 + 5 * 3 + 4 + 8) * (8 + 6) * 5)
(3 * 6 * 3) + 5
7 * (7 * 2 + 5 * 8 + 6) + (7 * 9 * (4 + 9 * 3) * 4)
(9 + 4 * 2 * 7 + 7 * 2) * 5 + 4 + 8 * (2 + 4 + 8 * 3 * 5)
4 * (8 * (3 * 4 + 7) * 8) + ((6 + 4 + 3 + 9) + 4) * 4 * 6 + 4
6 * (7 * (5 + 9 * 3 * 3) * 5)
(7 + 4) * 6 + 8 + (8 + (9 * 3 * 7 + 6 * 9) + 6)
7 + 2 * 2 + (7 + 9 + 7 * 3) * 2
9 + 3 * (8 + 7 + (8 + 7 + 3 + 8 + 4) + 2 + 7 + 5) * 3 + (2 * (4 + 4 * 8 + 4))
6 + 4 + 7
6 * (8 + 3 + 8 * 5) * 2 + 5
((6 + 6) + 8 * 3 * 3) + 8 + ((2 + 8 * 2) + (9 * 6) * (8 * 6)) + 5
(8 * (5 + 3 + 7 + 2) * 6 + (4 + 9 * 3 + 8) + 3 * 7) * 9 + 2
6 * 2 * (6 + (8 + 5) + 9 + 2) * 5 + 6 * 5
7 + (8 + 7 * (9 + 2 + 6 + 7 * 3) * 4 + 4 + 2) + 9 * 3
8 + (6 + 3) + 3 + (6 * 3 + 8 + 7 + (6 * 9)) * (2 * 9) + 7
8 + (7 + 2 * (8 + 9 * 9) + 5 + 7 + 8) * (6 + (2 * 3 + 5 + 6) + 6 + (8 * 5 * 2 + 5 * 2 * 4) * 9)
8 + 6 * 6 + ((3 * 3) + 2) * (8 * (5 * 4 * 3 + 2 * 7 * 9) * 9 + 9 + 6 * (2 * 3 * 3 * 4))
8 + (5 * 7 + 2) * 2 * 4
(8 * 2 * 9 * 2 + 2) * (8 * 8 + 2 + 9 * (7 * 7 * 2 * 7 * 5) * 4) + 3 * 6 + (8 + 3 + 6 + 8 * 9)
5 + (9 * 5) + 9 + 2 * (9 + 5 * 7 + 2 * 2) + 6
(6 * (4 + 8) * (4 + 3 + 4 + 8 * 3) + 8 * 3) * 8 * 5
((9 + 5 + 4 * 8) + 5 + (2 * 5) * 3) + 5 + 4 * (7 + 8 * 5 * (9 + 7 + 2 * 3 + 4))
7 * 9 * (9 * 6 + 7) + 5
9 * 6 + 4 + 9 * (3 + 8 * 6 + 8 + 5 + 4) + 7
9 * (9 * 2)
((7 + 6 + 6) + (8 * 9 + 2 + 7 * 6) + 9 + 3) + 8
8 * (8 + (5 * 5)) + 4 * (5 + 8)
4 * (5 * (4 * 5 * 2 * 5 + 5 + 9) * 6 + (3 + 5 * 9 * 4)) * 4 * 2 * 8 * 7
9 + (3 * 4 + (2 * 5 + 3 + 3) * 2 * 2 + (4 + 4 * 9 * 4)) + 2
4 + 4 + 8 + (2 + (6 * 6 * 2) + 3 * 2 * (3 + 3 + 9 * 4))
(9 + (8 * 2 * 2) * (6 * 4 + 9 * 8 * 7 + 9) * 4) + 4
9 + 9 * 8 + 9 * 2 * ((5 + 3 * 4) * 5 + 3 * 3)
(8 * 3 + (8 + 8 * 6 * 9 + 3) * (5 * 2 + 2 + 2) + 3 * 9) + 5 + 6 + 5 + 3 * 5
3 * (3 * 8 * 9 + 4 * 9 + 5)
9 * (9 * 3) + 5 * 3 + 2
5 * (3 * 3 + 7 * (2 * 7 + 9 + 4 * 6 * 4) + 6 * 9)
(8 * 9 + 2 * 3) + 5 + 3 + 5 * 8 * 8
6 * ((2 + 6 + 6 * 7 * 4 * 6) + 6 + 5 + (7 + 4 * 3 + 4 + 3 + 6) + (4 + 5) * 3)
(6 * (2 * 4 * 2 + 7 * 7 * 9)) + 2 + 2 + 8 + 4
4 + 9 * (9 * (6 + 7) + 5)
6 + ((4 + 8 + 5 * 9 * 4 * 7) * 7 + 7 * 4 * 7) + ((5 * 8 * 8 * 2 * 4) + 6 + 9 * (5 * 8 * 8 * 5 + 2) + 5) + 2 + 7 * 6
(7 + (8 * 6 * 6 + 5)) + (3 + 3 + 8 + 6 * (2 * 7))
(6 * 9) * (4 * 9 * (7 + 2 + 9 * 8 * 7 * 6) * 9 + 9 * 9) * 3 + 6
((9 * 9 * 4 * 2) + 3) * (2 * 6 * 9 * 4 + (2 + 4 + 5 * 2 + 2 + 2)) * 9 * 4 + (5 * 8 * 8 + 2 * 4) + 5
((4 * 4) * 2) + 3 * 5
7 * 6 * 6 * (7 * 4 * 9 * (6 * 9) + 9 * 2)
(7 + 8 + (3 + 5) + 5) * 7
5 * 8 + (9 * 4 + (2 * 7 + 7 * 2 + 2 + 4) * 5 * 8 + 3) + (9 + 2) + 3
5 * 2 + ((7 + 8 + 5 * 8 + 6) + (5 + 9 * 2))
(3 * 4 * (2 * 9 * 3 + 3 * 8) * 5) * (9 * 2) + 8 * 3 * 6
6 * 3 * 6 * (3 * 7) * 9 * 8
(6 * 6 * 2 * 4) + 6 * 5 * 9 + (6 + 4) + ((6 * 7 * 7) + (8 + 2) * (5 * 9 * 7 * 7 + 8 * 4) + 3 + 8 * (5 * 6))
7 * (7 + 5 + 5 + 3 * 5) * 2 + 8 * 7 + 7
8 * 6 + 7 + 6 * (7 * 6)
4 * 8 * ((4 + 6 + 4 * 5 + 5) + 2 + 7)
7 + ((9 * 9 + 5) + (5 * 2) + 7 * 3) * 7
6 * 3 * 8 * 7
8 * (3 * (8 + 4 + 9) + 9) * (9 + 2 * 5 * (9 + 5) + 3) * 9 + 7
7 * 4 * 8 * (4 * 7 + 8 * 6 * 5 + (6 * 2))
7 + 2 + (4 + (4 + 5 + 6 * 8 * 4 * 6) * (5 * 6 + 9 * 9)) + 3
9 * 4 + 5 + (6 + 7 + 4 * 9 + 2) * 2 * (8 + 2 + 3 * 2 * 3)
4 + (6 + 2 + 3 + (8 * 2)) * 5
(2 * 4 * 7 + 7 * (8 * 5 + 7 + 6)) * (8 + 9 * 6 * 5 + (6 + 9 * 2)) * 7 + 9 * 5
6 * 3 * (3 * 3 + 5) * 8 + 7 + 9
9 + 6 * 3 * (3 + 6 + 8 + 6 * 5) * 3 + 7
6 * ((5 + 9 * 3 * 3) * (9 + 5 + 5 * 8 * 6))
(2 * 4 + 6) * 5 + 2 * 4 * 9
8 + 8 * 5 * 9 + 3 * 3
(5 * 5 * 6) + 6 * 5 + 7
9 * 2 * 2 * ((7 + 5 + 5 + 2 * 2 * 9) * 5 * 2 * (8 * 7 * 2) * (9 * 8 * 5 * 5 * 5) * 5)
6 * 6 * ((3 * 9) * 3 + 3 * 6)
8 + 9 + 8 * 6 + 6 + ((2 * 5 + 5) * (3 * 7 + 5 * 9) + (8 + 9 + 9 + 4) * 2 * 4 + (4 * 5))
(6 * 8 * 4 + 8 * (4 * 8) * 4) * 7
6 + ((8 * 3 * 8 + 2) + 8 + (2 + 5 * 6 + 8 * 8) * 7 + 6 + 3) * 4 * 6 + 2
4 + ((7 + 7) * 3 * 4 + 8) * 7 + 7 + 6
6 * 3 + (3 * 6 * (2 * 3 * 2 + 6 + 6) + 9 + 5 * 6) * 9 * 7 * 2
(5 * 8 * 2 + 4 + 7 * (2 + 4 * 6 * 4)) + 3 + (6 + 5 + 4 + 6 + (5 * 3 * 5 + 6 + 4))
5 * 9 * 6 + 4 + ((5 * 2 * 2 * 6) * 2) + (5 * 5)
8 + (7 + 6 * (8 * 2 + 4 * 4 + 8) * 2 * 9 + 3) * 2 * 3 + 3 + 3
5 * (8 * 3 * 9 * 7 * 7 + (6 * 8 + 2 + 7)) + 5 * 2
(7 + 6 * 5 + 9 * 9 * (3 + 3 + 7)) * 8 * 5 + 8 + (2 + (5 + 3 + 2 * 6 * 2) * 3 + 3) + 2
((5 + 8 * 9 * 6 * 6 * 3) + 5 + 2 * 6 + 6) * 7 * 6
3 + (7 * 5 + 8 * 3)
7 + 4 * (4 * 2 * 7 * 7) + ((8 * 9 * 7 + 8 + 5) * 3 + (8 + 6) * 6) * 7 + 2
3 + (9 * 6 + 3 * 3 * 8 + 7) * 9 + (9 * 7 * 7 + 6 * 8) * (3 * (6 * 3 + 4)) + 4
5 + 6 + 9 + (5 * (8 + 2 * 4) * (8 + 5 * 5 * 2 + 2) * (6 * 8))
3 * (8 + 2 * 8 + 5 * (9 * 3 * 8)) + 7
(3 * 5 + (4 + 2 + 2) + 8 + 9) * 4 * 4 * 5 + 4
(8 + 3 + 7 + 7 + 2 * 2) + (9 * 4 + 3 + 7) + (9 * (6 * 2 * 3) * (3 + 4)) * 4 + 3 * (2 + (5 + 5 * 9 + 8 * 8 + 2) * 4 + 3)
8 + 3 + 9 + (6 + 3 + 5 + 2)
5 * ((5 * 8 * 9 + 7) + 2) + 6
9 + 3 + 2 * (9 * 7)
5 * (8 + 6) + ((8 * 3 + 4 + 2) + 5 * 4 + 3 + 9) * 6
5 + 9 + (6 + 8 * 8 * 8) + 5 * ((7 + 2) + 5 + 6) * 8
(4 + (6 * 4) + 9 * 9 + 8) + (8 * 3 + 2 * 7 + (4 * 3 * 8 * 8 + 8 + 7) * 9) * ((4 + 2 + 4 + 3) * 9 * 5 + 8 * 7 * 5) + 3 * 9 + 6
5 * 4 + 5 + (7 + 3 + 9 + 2 * 7)
2 * 6 * 2 * 7 * 3
6 * 7 * (4 * 9 + (2 * 9 + 4)) * 9 + (8 + (2 * 5 * 4 + 8 + 9 + 5)) * 9
(3 + 8 * (4 + 4 + 9 + 4) * 8 + (3 + 9) + 8) * 2 + (7 + 5 + 8 * 8 + 4 + 5)
2 + (5 * 4 * 9 * 2 * 9 * (8 + 6 + 3 * 8 + 5 + 5))
6 + (9 * (5 + 2 + 8 + 4 * 2) + 9 + (3 * 3 + 5 + 5)) * 7
2 + 6 * 3 + 5
3 + (9 + 4 * (5 * 6 * 9 * 3)) + 7 * (2 + (2 + 2) * (2 * 3 + 3 * 3 + 9 + 7))
7 * 6 * 4 * (3 * 9 + 6) * (7 * 8 * 4 * 2 * 2) * 9
6 + 3 + 2 + 3 * ((5 * 8 * 3 * 2 + 9 * 8) + 3 + 7 + 9) + (5 * 8)
((5 * 7 * 5 + 4) + 8) * 3 * 6 * 2 + 6
((9 + 6 + 5 + 4 + 5) + 8 + 2) + 3 + 3
((8 + 5 * 5 + 2) + 8 * 4 * 9 * 9 * 2) * 4 + 3 + 2 * (9 + (8 + 4) * 2 * 8 + 4) * (3 * 9 + 7 * 3 * 3)
6 + (6 * (5 + 8 + 4 * 9) + 3 * 7) * 9 + 3 + 3
6 + (6 * 5) * 9
3 + 9 * (2 * (6 + 8 * 7) + (8 + 8 * 6) + 6 * 7 + 5) + 6
(3 + 7 + 2 + 9 * 8) + 4 + (6 * (3 + 9)) * 2
5 * 4 * 8 * 2 + 8
(9 * (8 * 6 + 7 * 8 + 4 + 8) * 9 + (5 * 7 + 5 + 7) * (4 * 8 * 4 + 8) + 4) * 7 + 6 * 4
7 + 5 * (3 + 5) * 5
6 + (6 * 7 + 8) * ((5 * 3 * 6 * 9) + 3) * 4 * 7
4 * (5 + 5) + 9 + 2 + 9 + (2 * (9 + 7 + 4))
((7 + 6) + 4) * 9 * (2 * 2 * 2 * 7)
3 + 4 + 2 * 8 + (9 * 4 + (9 * 9)) * ((4 * 2 * 8 + 7 * 2) + 5 + (9 + 6 + 2 * 2 + 9 * 4))
2 + ((3 + 5 + 9 + 7) + 4 + 4 + (8 * 2 + 2 + 4) * 4 * 2) + 9
6 + 9 * ((3 * 3 * 3 + 2 + 8 * 9) + 6 * 3) * 4 * (8 + 7 + 5 * 6 + 9)
4 * 7 * 4 + 5 * (5 * (2 + 6 + 7 + 5 * 5) * 3 * 5 * 2)
6 + 6 + (8 + 8)
4 + 9 + (7 * 2 + 4 + 7) + (6 * 4) + 3
9 * 6 + 5
4 + 4 * ((9 + 4 * 7 * 7 + 9 + 4) * 5) + 7
(5 * 7 * 8 * 5 + 8 * (3 + 5 + 6 * 7 + 7)) * 7 * 4
8 * 6 + (8 * 8 + 5 + 4 + 5 + 7) + 6 * (3 + 8) + 5
7 * 4 + 6 * 4 * ((2 + 6 * 6 * 2) + 5 * (8 + 9) * 6 + 5 * 5) + (3 * 4 * 2 + 9 + (5 * 9 * 8 + 9) + 4)
4 * 5 * (5 + 8) * (4 + 5) + (7 + 5 * 3 + 4)
8 * (9 + (3 * 7) + 5) * 5 * 2 * 2
2 * (2 + 8 + 4 + 2 + 4) + 6 + (4 + (7 * 6) * 3 + 3) * 9
6 * 6 + 8 + 4 + ((2 * 8 * 9 * 8 + 3) + 7 * 5 * 4)
9 * 2 + 8
6 * (7 * 8 * 5 + 6 * 8) + 5
9 * 7 + (9 + 4) * 2 + (7 + 4) + (7 * 6 * 2 * 4 * 9 * 9)
5 * 6 * 4 * (4 * 9 * (6 * 6 + 8 + 7 * 2 + 8) * 9) + 8
9 * ((7 + 7 * 5 + 3 * 2) + (6 * 2 * 9 * 5) * 8)
((5 + 9 * 6 * 9) * 7 * 2 + 5 * 3) * 8 + ((6 + 4 + 3 + 9 * 8 + 8) * 3 * 8 + 8 * 5) * (2 + 4) * (7 + 8 * 2 * 6)
(3 * 4 * (9 + 8 + 4 + 3 * 9)) + (8 + 8 * 6 + 6 * 2 * 6) * 7 * 5 * 6 * 2
(3 * 8) * 9
((6 + 2 * 6 + 3 * 4) + 4) * 9
8 * (8 * (4 + 5) * (6 + 7 + 6 * 5) + 2 + (4 * 5 * 5)) * 7
3 + (6 + 3 * 8) + (4 * 3 + 4 + (9 * 7 + 6 + 4 * 2 + 7)) + (7 + 7 + 3 + 9 + (8 + 5)) + (3 * (7 * 4 * 3 * 3 * 9) * 8 * 7)
3 + 7 * (3 * 4 + 3) + 3 + (8 * 5 * 2 * 4) * 7
(8 * 7) + (8 * 7 + 9 + 9 * 6) + (3 + 3 + 9 * 4 + (9 * 3 * 2 + 3 * 2) + 5) + 4 * 5 * 2
7 + 4 + 2 + 9 * 2
(2 * 3 * 8) + (9 * 9)
6 * (2 + 5 + 2 + (8 + 2 + 8 + 8 + 2 + 8) * 4) * 8 + 7 + 5
(8 * (8 * 7 * 3) * 4 + 9) + 3 + 6 + 8
5 + 3 + 3 * 6 + 8 * (7 * 9)
(3 + 9 + 6 * 3) * 3 + (2 + 5) * 5 * 2
(7 + 3 + 3) * 2 * 9 * 6 * (5 * 7 * 2)
3 + 2 + (6 * 2 + 3)
4 * 4 * 5 * (2 + 5 * 7 + 2 * 3 + 5) + 4 + 4
5 * 9 * 6 + 6 + (7 * 3) + 9
2 * 9 * ((8 * 4) + (2 * 7 + 2 * 8) * 5 * 4) + 6
2 * 4 * ((4 + 3 + 3 + 9 * 4) * 9 + (3 * 8)) + 5 + 5 + (7 + 9 + (3 * 5 * 4 + 7 + 4 + 3) * 8 * 9)
(9 * 4 * (3 * 8 + 7 * 9 * 3)) * 7 + 3 * 3 + 8 * 8
(7 * 7 + (6 * 7 + 4 + 9 * 7 * 3) + 4 * 4) * 7
(9 * 7 + 4 + 3 + 9 + 9) + (5 * 6 + (5 * 4 + 8 * 7 + 2 * 5) * 7 * 3 + 6) + 3 + 5
9 * 6 + 9 * (6 + 9 + 9 + 7 * 9 + 3)
5 * 5 + ((9 + 7) + 3)
3 * (8 + 7 * 6 * 9 + 8 * (6 + 9)) + 5 * 3 + 9 * 9
6 * (3 * 8 * 4) * 3
(8 * 8 * 7 * 8 * 4) + 5 * 2 * ((5 * 7 * 3 * 3) * 6 * 7)
((3 + 7) + 2 + 3 + 7 * 7 + (9 + 2 * 5 + 3 * 4)) * 9 * 8
9 * 3 * (6 + (8 * 7 + 3)) + 8 + 7 + 2
(2 * 8 * 3 * 4 * 9) * 9 * 8 + (8 + 7 * (3 + 9 + 6) * (3 + 2 + 9))
7 + (4 * (3 + 4 + 2 * 8 + 4 * 7) + 5 + 9 + 3) * 4
5 + (3 * 5 + 3)
(7 + 6 + 8 * 6 + 6) * (8 + 4 * 4) + 9
((4 * 7 * 3 * 5 * 7) + 4 + 2) + (3 + 8)
(5 * 6 * 6) + (5 * 8) * 7 * (3 + 2 + (5 + 2 + 6 + 3 + 6) * (8 * 8 + 7 + 4)) * 8
9 + 9 + ((6 + 7 + 5 + 8) * 6)
4 * 3 * 2 + 2 * 3 * (4 * 5 + 6 + 9 * 8)
9 * 3 + 7 * 3 * (3 * 4 + 9 + (5 * 8 + 7) * 7 * 9) + 3
(9 + 3 * (2 * 9 * 6) + 5) * 9 * 8
6 * ((6 * 7) * 2 * 9 * 2 + (9 + 4 + 7)) * (2 + 3 * 4 * 9 + (7 + 5)) * 3
3 + ((4 * 6 + 9 * 8) * (4 + 6 + 6 + 4 * 2 * 3)) + (6 * 3 + (5 * 2) + 8) + 6
3 + (7 * 6 + (8 + 7)) + 5 * 5 + 8
9 + 4 * 7 * (9 + (6 + 9 + 7 * 4 * 4 * 4) * 2 * (9 + 8 * 2 * 4 + 9) + 3)
4 * (8 * 5 * 3) + 9 * 7 * 7 + 2
6 + (6 * 5 + 4 * 3 + 4 * 9) + 5 + 7 + 3 + 9
9 * 5 * (8 + 5 * 4 * 3 + 3 * 5) + 7 + 6
9 * 9 + 5 + 7 + 4
(8 + 9) + 4 * 9 * 3 * ((6 + 4 + 4 * 6 + 2) * 2) + 4
4 + 2 + 9 + (8 * 5 * (4 + 2))
5 * 5 + 6
9 * 5 * (8 * 4 * 7 + 8 + 6) * 2
(2 + 7 * (4 + 5 * 5 * 8 * 5 + 3) * 8) + (4 * 8 * 3 * 5) + 5 * 6 * 3
8 * 5
(8 + 4 * 3 + 6) + 7 + (3 + (5 + 2 + 5 + 2) + 9 * 3 + (4 * 4 * 9 * 6)) * 9 + 3
(6 + (3 + 3) * (4 + 5) + 5) + 7
3 * (4 + 8 * (8 + 7) * 2) + 5 * 4 * 7
9 + (2 * 4 + 4) * 6 * 6 + 6
((8 + 2 * 2) * 8 + (7 + 6 * 2 + 2 + 8) * 6 * 6 * 8) + 9
(9 + 6) * (9 * 4) * 4 + 6
((4 * 4 + 2 * 8) + (7 + 3 * 8 * 9)) + 8
6 * 9 * 2 + 8
9 * (9 * 7 + 4 + (4 * 3) * 8) * 9 + 3 + (8 + 4 + (3 * 4 * 9))
6 * 2 + (9 + (6 * 9) * 7 * (6 * 7 + 4 * 4) + (9 * 5)) + 2 + 5 * 7
3 + (6 + 2 + (9 + 3 + 9) * 9 + (6 + 5) * (4 + 8 + 7 + 9 + 8)) * ((3 + 7) + 4 + 2 * (7 * 9 + 8 + 7 * 6 * 4)) * 5 * 9
((9 + 3 * 9 * 2) * (8 * 4 + 6 + 5 + 7 * 9) * (5 * 6 * 8) * (7 + 7 + 2 + 6 + 8) * (2 + 3 + 4 * 5 * 3) * 8) * 9 + 4 + 2 + 3 * 4
4 * 8 + 3 * 5 + 2 * (7 * 4 + (5 * 6 * 7 + 2) + 9 + 9 * 4)
(8 * 2 + 8 * 2 * 3 + (7 * 8)) + (6 * 5 + (3 + 9)) * 7 * 8 + 2 + 8
(4 + 2 * 5) + 6 * 2 * ((2 * 5) * (8 + 2 + 2 + 2 + 9) * 8 + 7 + 4 * 4) * 9 * 2
9 * 3
(4 + (3 + 6) * 8 + 4) + 7 + 7 * 4
3 + 8 * 3 + 3 + 3 + (7 + 5 + (7 + 9 + 7))
7 + 6 + 4 * 8 * 6 + 7
7 + 3 * 4 * (4 + 7 + 6 * 3 + 6 * (4 * 7)) * 9
4 * 7 + 8 * 7 + 9 * (9 * 3 + 7 * 8)
(6 * 7 + 8 + 5 + (5 * 7 * 3 * 2 * 9 * 8) * 5) + 9 + 6
6 + (8 * 7 + 4) + 2 * (9 + 6 * 2) * 2
3 + 7 + 9 * 4
((8 * 4 + 5 + 2) * 5) + 6 + 2 * 9
(6 * 6) * 7 * (7 * 5 + 2 * (6 * 2 * 7)) * 9 + 2 + 5
5 * 7 + (5 * (6 + 8 + 8 * 5 + 3 * 8) + 2 + 8 * 3 * 3) + 9
7 * 5 + (9 + 7 * 7) * (4 * 4 + 3 + 5 * 7 * 5) * 5 * 6
6 + 6 * 3 + (4 * 5) + 6
2 + 9 + 7 + 4 * 7 + 3
4 + ((7 + 4 + 2 * 6) * (8 + 2 + 4 * 7 + 5 * 9))
(7 * 4 + (9 * 5 + 6 + 9 * 4 * 9) + 3 * 3) * ((3 * 2) * 7) + 8
(2 * 2 + 8 * (9 * 2) * 9) * 3 * ((3 * 9 * 7 + 9) + (2 + 4) * 7 + 5 * 5 + (9 + 2)) * 2 + 7 + 8
(9 + 7 * 6 * 6 + 9 * 9) * 7 + 4
2 * 5 * 2 * 7 + 4 * 7
6 + 6 + (3 + 3) + 6 + 4
4 * (3 + 5 * 4 + 5) + (5 * 8) * 8 * 8
4 * 9 + ((4 * 6 + 2 + 7) * 4) * 8
(5 * (5 + 4 + 5 + 4 + 7) + 4) * 8 * 4
8 * ((3 * 9 + 6 * 2 * 2) * 8 + (7 + 4 + 7 + 9 + 9 + 4) + (3 + 6 * 7 + 8) * 2) + 7
6 * 7 * (6 * 9 * 8 * 5 * 3)
(7 * 6 + 9 + 5 + 7) * 2 + (6 + 2) * 5 + 8
(7 + (5 + 4 * 8) + 5) + 4 * 4 + (7 + 6 + 7 * 6 * 5 * 9) + 8
4 * 7
8 + ((8 * 4 * 2 * 7 + 9 + 2) * 4 + (9 * 7 * 4 * 7 * 2) * (2 * 2 + 5 * 8 * 7)) + 4 * 5 + 6 * (8 + 3 * 3 + 3)
(3 + 9 + 3 + 3 + 2 + (4 * 9)) * 3 * 3 + 9 + 7 + 2
8 * (5 + 3 * 7 * 9 + 8) * 4 + 2 + ((7 + 5 * 4) + 4 + 7 + (5 * 9 * 2 + 4))
8 + 5 * ((6 + 8 * 8 + 5 * 8 + 5) * (8 * 2 * 6 + 7 + 2 + 5) * 3 * 5 * 5 + (3 + 3)) * ((2 + 9) + 2 + 9)
(2 * 6 + 5 + 8) * 7 * 3 * 5
(8 + 9 * 8 + 3) * (6 + 9) + 5 * 4 + 6 * 4
(2 * (8 + 3 * 2 * 8) + 8 * 6 + 3) + (8 + 9 + 7 * 4 + (2 * 5) * 9)
6 * 3 + 2 + (7 * 3 + 7 + (6 * 6 + 7 + 4))
4 * 3 + (3 + (7 + 3 + 8 + 9 * 9) + (2 + 7 + 9) + 6) + 8 + 4 * 8
5 + 8 * 5 + (9 + (2 + 5 * 6 + 9) * 4 + 7 * 9) * 3
2 + 7 + 9 * 4 + 8
3 * 9 + ((5 + 8) * (7 + 9 * 7))
(4 + 7 + 7 + 5 + 2) + 4
(6 * 5 * 6 + 9 * 6) * 6 * 7 + 4 * 7 + 8
7 + 8 + (6 + (7 * 9 + 7 * 7 * 7)) + 5 * (7 * 4 + (4 * 9 + 8 + 5) * (5 * 9 * 4) * 2 + (7 + 3 * 7 * 5 + 9 + 9)) + 8
3 * 9 * ((4 * 7 * 3) + 8 + (8 + 8 + 9 + 5 + 9) + 2 * 8 + 7) * 3 * 9
6 * 3 + 6 * (8 * 6 * (7 * 9 + 4 * 3 + 9 * 6) + 5) + 8 + 4
6 * (4 * 4) + (6 + 7 * 3 + 3 * 2)
8 * (5 + 8 * 8 * 6) + 6 + 2 + 6 * 5
(6 + 9 + 2 * (5 + 4 * 5)) * 4 + 9`
